name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  FLUTTER_VERSION: '3.22.0'

jobs:
  # Backend Tests
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: flerte_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm ci

      - name: Generate Prisma client
        working-directory: ./backend
        run: npx prisma generate

      - name: Run database migrations
        working-directory: ./backend
        run: npx prisma migrate deploy
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flerte_test

      - name: Run backend linting
        working-directory: ./backend
        run: npm run lint

      - name: Run backend tests
        working-directory: ./backend
        run: npm run test:cov
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/flerte_test
          REDIS_URL: redis://localhost:6379
          JWT_SECRET: test-secret
          NODE_ENV: test

      - name: Upload backend coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage/lcov.info
          flags: backend

  # Mobile Tests
  mobile-test:
    name: Mobile Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Install mobile dependencies
        working-directory: ./mobile
        run: flutter pub get

      - name: Generate code
        working-directory: ./mobile
        run: flutter packages pub run build_runner build --delete-conflicting-outputs

      - name: Run mobile linting
        working-directory: ./mobile
        run: flutter analyze

      - name: Run mobile tests
        working-directory: ./mobile
        run: flutter test --coverage

      - name: Upload mobile coverage
        uses: codecov/codecov-action@v3
        with:
          file: ./mobile/coverage/lcov.info
          flags: mobile

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Build and Deploy (only on main branch)
  build-deploy:
    name: Build and Deploy
    runs-on: ubuntu-latest
    needs: [backend-test, mobile-test, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: backend/package-lock.json

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: ${{ env.FLUTTER_VERSION }}
          channel: 'stable'
          cache: true

      - name: Build backend
        working-directory: ./backend
        run: |
          npm ci
          npx prisma generate
          npm run build

      - name: Build mobile (Android)
        working-directory: ./mobile
        run: |
          flutter pub get
          flutter packages pub run build_runner build --delete-conflicting-outputs
          flutter build apk --release

      - name: Build Docker image
        run: |
          docker build -t flerte-backend:${{ github.sha }} ./backend
          docker tag flerte-backend:${{ github.sha }} flerte-backend:latest

      - name: Deploy to staging
        if: github.ref == 'refs/heads/develop'
        run: |
          echo "Deploying to staging environment"
          # Add your staging deployment commands here

      - name: Deploy to production
        if: github.ref == 'refs/heads/main'
        run: |
          echo "Deploying to production environment"
          # Add your production deployment commands here

  # Notification
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [build-deploy]
    if: always()
    
    steps:
      - name: Notify on success
        if: needs.build-deploy.result == 'success'
        run: |
          echo "✅ Deployment successful!"
          # Add notification logic (Slack, Discord, etc.)

      - name: Notify on failure
        if: needs.build-deploy.result == 'failure'
        run: |
          echo "❌ Deployment failed!"
          # Add notification logic (Slack, Discord, etc.)
